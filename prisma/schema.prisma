// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String      @unique
  password  String
  role      UserRole    @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relations
  workspaces UserWorkspace[]
}

enum UserRole {
  USER
  ADMIN
}

model Workspace {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  users     UserWorkspace[]
  todos     Todo[]
  casts     Cast[]
}

model UserWorkspace {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  workspaceId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workspaceId])
}

model Todo {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  completed   Boolean    @default(false)
  workspaceId String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Cast {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  customerCode            Int?
  monthDate               String?
  date                    String?
  name                    String
  phone                   String?
  k                       Int?
  t                       Int?
  otherProducts           String?   @default("")
  advance                 Int?
  amount                  Int?
  product                 String?
  area                    String?
  notes                   String?   @default("")
  collectedInstallmentNumber Int?
  printStatus             String?   @default("")
  upcomingCollectionAmount Int?
  nextInstallment         Int?
  next                    Int?
  piecePrice              Int?
  status                  String?
  column2                 Int?
  delayInMonths           Int?
  paidFromNextInstallment String?   @default("")
  latitude                Float?
  longitude               Float?
  workspaceId             String    @db.ObjectId
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  // Relations
  workspace               Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  installments            Installment[]
}

model Installment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  castId        String   @db.ObjectId
  dueDate       DateTime
  amount        Int
  number        Int      // رقم القسط
  status        InstallmentStatus @default(DUE)
  paidAt        DateTime?
  postponed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  cast          Cast     @relation(fields: [castId], references: [id], onDelete: Cascade)
}

enum InstallmentStatus {
  DUE      // مستحق
  PAID     // تم التحصيل
  POSTPONED // مؤجل
}